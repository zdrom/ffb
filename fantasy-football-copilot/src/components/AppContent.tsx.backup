import { useState } from 'react';
import { useDraft } from '../contexts/DraftContext';
import { useWebSocket } from '../hooks/useWebSocket';
import { hasGlobalVORPRankings } from '../utils/globalVORPStorage';
import Header from './layout/Header';
import DraftStatus from './layout/DraftStatus';
import DraftSettings from './draft/DraftSettings';
import PlayerImport from './players/PlayerImport';
import GlobalVORPSettings from './settings/GlobalVORPSettings';
import { DraftHistory } from './draft/DraftHistory';

type SetupStep = 'settings' | 'vorp-settings' | 'import' | 'draft';

const AppContent = () => {
  const { state, dispatch } = useDraft();
  const { isConnected, connectionStatus } = useWebSocket();
  const [currentStep, setCurrentStep] = useState<SetupStep>('settings');
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const [showVORPSettingsModal, setShowVORPSettingsModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  const handleSettingsClick = () => setShowSettingsModal(true);
  const handleVORPSettingsClick = () => setShowVORPSettingsModal(true);
  const handleHistoryClick = () => setShowHistoryModal(true);

  return (
    <div className="min-h-screen bg-gray-50">
      
      <Header
        onSettingsClick={handleSettingsClick}
        onVORPSettingsClick={handleVORPSettingsClick}
        onHistoryClick={handleHistoryClick}
        leagueName={'Fantasy Draft Copilot'}
      />
      
      {currentStep !== 'settings' && <DraftStatus />}
      
      <main className="max-w-7xl mx-auto px-6 py-8">
        {/* Connection Status */}
        <div className="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-md">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className={`h-3 w-3 rounded-full mr-2 ${isConnected ? 'bg-green-500' : 'bg-red-500'} ${isConnected ? 'animate-pulse' : ''}`}></div>
              <span className="text-sm font-medium text-gray-900">
                Chrome Extension: {connectionStatus}
              </span>
            </div>
            <span className="text-xs text-gray-500">
              {isConnected ? 'Ready to sync Yahoo draft picks' : 'Install Chrome extension for Yahoo sync'}
            </span>
          </div>
        </div>

        
        {currentStep === 'settings' && (
          <DraftSettings onComplete={() => {
            // Skip import if global VORP rankings exist, go straight to draft
            if (hasGlobalVORPRankings()) {
              setCurrentStep('draft');
            } else {
              setCurrentStep('import');
            }
          }} />
        )}
        
        
        {currentStep === 'import' && (
          <PlayerImport onComplete={() => setCurrentStep('draft')} />
        )}
        
        
        {currentStep === 'draft' && (
          <div className="space-y-4">
            {/* Top 3 VORP Players Overall */}
            <div className="bg-white rounded-lg shadow p-4">
              <h3 className="text-lg font-bold text-gray-900 mb-3">Top 3 VORP Available</h3>
              <div className="grid grid-cols-3 gap-4">
                {state.players
                  .filter(p => !p.isDrafted && !p.isDoNotDraft)
                  .sort((a, b) => (b.vorp || 0) - (a.vorp || 0))
                  .slice(0, 3)
                  .map((player, index) => (
                    <div key={player.id} className="text-center p-3 border rounded-lg bg-gradient-to-br from-green-50 to-blue-50">
                      <div className="text-2xl font-bold text-green-600">#{index + 1}</div>
                      <div className="font-semibold text-gray-900">{player.name}</div>
                      <div className="text-sm text-gray-600">{player.position} - {player.team}</div>
                      <div className="text-xl font-bold text-blue-600">VORP: {(player.vorp || 0).toFixed(1)}</div>
                    </div>
                  ))}
              </div>
            </div>

            {/* Top 10 VORP by Position - Horizontal Layout */}
            <div className="bg-white rounded-lg shadow p-4">
              <h3 className="text-lg font-bold text-gray-900 mb-3">Top 10 VORP by Position</h3>
              <div className="grid grid-cols-2 gap-4">
                {['QB', 'RB'].map(position => (
                  <div key={position} className="border rounded p-3">
                    <h4 className="font-semibold text-gray-800 mb-2 text-center">{position}</h4>
                    <div className="grid grid-cols-2 gap-2">
                      {state.players
                        .filter(p => p.position === position && !p.isDrafted && !p.isDoNotDraft)
                        .sort((a, b) => (b.vorp || 0) - (a.vorp || 0))
                        .slice(0, 10)
                        .map((player, index) => (
                          <div key={player.id} className="text-xs">
                            <div className="font-medium truncate">{index + 1}. {player.name}</div>
                            <div className="text-blue-600 font-bold">{(player.vorp || 0).toFixed(1)}</div>
                          </div>
                        ))}
                    </div>
                  </div>
                ))}
              </div>
              <div className="grid grid-cols-2 gap-4 mt-4">
                {['WR', 'TE'].map(position => (
                  <div key={position} className="border rounded p-3">
                    <h4 className="font-semibold text-gray-800 mb-2 text-center">{position}</h4>
                    <div className="grid grid-cols-2 gap-2">
                      {state.players
                        .filter(p => p.position === position && !p.isDrafted && !p.isDoNotDraft)
                        .sort((a, b) => (b.vorp || 0) - (a.vorp || 0))
                        .slice(0, 10)
                        .map((player, index) => (
                          <div key={player.id} className="text-xs">
                            <div className="font-medium truncate">{index + 1}. {player.name}</div>
                            <div className="text-blue-600 font-bold">{(player.vorp || 0).toFixed(1)}</div>
                          </div>
                        ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

              {/* Targeted Players with Search */}
              <div className="bg-white rounded-lg shadow p-4">
                <h3 className="text-lg font-bold text-gray-900 mb-3">Targeted Players</h3>
                <div className="mb-3">
                  <input
                    type="text"
                    placeholder="Search players to target..."
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                {/* Search Results */}
                {searchTerm && (
                  <div className="mb-3 max-h-32 overflow-y-auto border rounded">
                    {state.players
                      .filter(p => 
                        !p.isDrafted && 
                        !p.isTargeted && 
                        !p.isDoNotDraft &&
                        p.name.toLowerCase().includes(searchTerm.toLowerCase())
                      )
                      .slice(0, 5)
                      .map(player => (
                        <div 
                          key={player.id} 
                          className="flex justify-between items-center p-2 hover:bg-gray-50 cursor-pointer"
                          onClick={() => {
                            dispatch({ type: 'TOGGLE_TARGET', payload: player.id });
                            setSearchTerm('');
                          }}
                        >
                          <div>
                            <div className="font-medium text-sm">{player.name}</div>
                            <div className="text-xs text-gray-600">{player.position} - VORP: {(player.vorp || 0).toFixed(1)}</div>
                          </div>
                          <button className="text-xs text-blue-600 hover:text-blue-800">
                            Add Target
                          </button>
                        </div>
                      ))}
                  </div>
                )}
                <div className="space-y-2">
                  {state.players
                    .filter(p => p.isTargeted && !p.isDrafted)
                    .map(player => {
                      const picksUntilLikely = Math.min(state.picksUntilMyTurn + 2, state.settings.numberOfTeams * 2);
                      const availabilityPercent = Math.max(0, 100 - (picksUntilLikely * 10));
                      return (
                        <div key={player.id} className="flex justify-between items-center p-2 border rounded">
                          <div>
                            <div className="font-medium">{player.name}</div>
                            <div className="text-sm text-gray-600">{player.position} - VORP: {(player.vorp || 0).toFixed(1)}</div>
                          </div>
                          <div className="text-right">
                            <div className={`text-sm font-bold ${
                              availabilityPercent > 70 ? 'text-green-600' :
                              availabilityPercent > 40 ? 'text-yellow-600' : 'text-red-600'
                            }`}>
                              {availabilityPercent}% likely in 2 picks
                            </div>
                            <div className="flex gap-2">
                              <button 
                                onClick={() => dispatch({ type: 'TOGGLE_TARGET', payload: player.id })}
                                className="text-xs text-gray-600 hover:text-gray-800"
                              >
                                Remove
                              </button>
                              <button 
                                onClick={() => dispatch({ type: 'TOGGLE_DO_NOT_DRAFT', payload: player.id })}
                                className="text-xs text-red-600 hover:text-red-800"
                              >
                                Do Not Draft
                              </button>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  {state.players.filter(p => p.isTargeted && !p.isDrafted).length === 0 && (
                    <div className="text-gray-500 text-sm text-center py-4">No targeted players. Use search to add players.</div>
                  )}
                </div>
              </div>
            </div>

            {/* Team Draft Counts */}
            <div className="bg-white rounded-lg shadow p-4">
              <h3 className="text-lg font-bold text-gray-900 mb-3">Team Draft Counts by Position</h3>
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                {['QB', 'RB', 'WR', 'TE'].map(position => {
                  const counts = Array.from({ length: (state.settings.rosterSlots[position as keyof typeof state.settings.rosterSlots] || 0) + 1 }, (_, i) => {
                    const teamsWithCount = state.teams.filter(team => 
                      team.roster[position as keyof typeof team.roster]?.length === i
                    ).length;
                    return { count: i, teams: teamsWithCount };
                  });
                  
                  return (
                    <div key={position} className="border rounded p-3">
                      <h4 className="font-semibold text-gray-800 mb-2">{position}</h4>
                      <div className="space-y-1">
                        {counts.map(({ count, teams }) => (
                          <div key={count} className="flex justify-between text-sm">
                            <span>{count} players:</span>
                            <span className="font-medium">{teams} teams</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Draft History Modal */}
      {showHistoryModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-11/12 max-w-5xl shadow-lg rounded-md bg-white min-h-[80vh]">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-bold text-gray-900">Draft History</h3>
              <button
                onClick={() => setShowHistoryModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="h-full overflow-y-auto">
              <DraftHistory />
            </div>
          </div>
        </div>
      )}

      {/* Settings Modal */}
      {showSettingsModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-11/12 max-w-5xl shadow-lg rounded-md bg-white min-h-[80vh]">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-bold text-gray-900">Draft Settings</h3>
              <button
                onClick={() => setShowSettingsModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="h-full overflow-y-auto">
              <DraftSettings onComplete={() => {
                setShowSettingsModal(false);
                if (hasGlobalVORPRankings()) {
                  setCurrentStep('draft');
                } else {
                  setCurrentStep('import');
                }
              }} />
            </div>
          </div>
        </div>
      )}

      {/* VORP Settings Modal */}
      {showVORPSettingsModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-11/12 max-w-5xl shadow-lg rounded-md bg-white min-h-[80vh]">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-bold text-gray-900">VORP Rankings</h3>
              <button
                onClick={() => setShowVORPSettingsModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="h-full overflow-y-auto">
              <GlobalVORPSettings onRankingsUpdated={() => {
                // Optionally refresh any cached data
              }} />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AppContent;